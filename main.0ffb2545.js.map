{"version":3,"sources":["scripts/main.js"],"names":["table","up","paramArr","index","arr","filter","item","i","length","current","scoreValue","updateScore","mergedArr","down","unshift","showMessage","messageType","winMessage","document","querySelector","loseMessage","startMessage","classList","remove","add","noEmptyCell","row","cell","noCellToMerge","j","k","loseCheck","score","textContent","fields","querySelectorAll","button","updateGameFields","indexRow","Math","floor","indexCol","tableValue","appearingOneRandomCell","getRandonCell","rowIndex","columnIndex","firstRandomNum","random","restart","emptyCells","forEach","push","left","right","moveHorizontally","directionFunctionName","json","JSON","stringify","copyTable","parse","colIndex","moveVertically","addEventListener","contains","gameStart","e","key","gameTable","touchStartX","touchStartY","preventDefault","touches","clientX","clientY","touchEndX","changedTouches","touchEndY","touchDiffX","touchDiffY","abs"],"mappings":"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","file":"main.0ffb2545.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction up(paramArr, index) {\n  const arr = paramArr.filter(item => item !== 0);\n\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    const next = arr[i + 1];\n\n    if (current === next) {\n      arr[i] = current * 2;\n      scoreValue += arr[i];\n      updateScore();\n      arr[i + 1] = 0;\n    }\n  }\n\n  const mergedArr = arr.filter(item => item !== 0);\n\n  for (let i = 0; i < table.length; i++) {\n    table[i][index] = mergedArr[i] || 0;\n  }\n}\n\nfunction down(paramArr, index) {\n  const arr = paramArr.filter(item => item !== 0);\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    const current = arr[i];\n    const prev = arr[i - 1];\n\n    if (current === prev) {\n      arr[i] = current * 2;\n      scoreValue += arr[i];\n      updateScore();\n      arr[i - 1] = 0;\n    }\n  }\n\n  const mergedArr = arr.filter(item => item !== 0);\n\n  while (mergedArr.length < 4) {\n    mergedArr.unshift(0);\n  }\n\n  for (let i = 0; i < table.length; i++) {\n    table[i][index] = mergedArr[i] || 0;\n  }\n}\n\nfunction showMessage(messageType) {\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n  const startMessage = document.querySelector('.message-start');\n\n  switch (messageType) {\n    case 'win':\n      winMessage.classList.remove('hidden');\n      loseMessage.classList.add('hidden');\n      startMessage.classList.add('hidden');\n      break;\n    case 'lose':\n      winMessage.classList.add('hidden');\n      loseMessage.classList.remove('hidden');\n      startMessage.classList.add('hidden');\n      break;\n    case 'start':\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n      startMessage.classList.remove('hidden');\n      break;\n    default:\n      return 0;\n  }\n}\n\nfunction noEmptyCell() {\n  for (const row of table) {\n    for (const cell of row) {\n      if (cell === 0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction noCellToMerge() {\n  for (const row of table) {\n    for (let i = 0; i < row.length - 1; i++) {\n      const current = row[i];\n      const next = row[i + 1];\n\n      if (current === next) {\n        return false;\n      }\n    }\n  }\n\n  for (let j = 0; j < 3; j++) {\n    for (let k = 0; k < 3; k++) {\n      const current = table[k][j];\n      const cellNextRow = table[k + 1][j];\n\n      if (current === cellNextRow) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction loseCheck() {\n  if (noEmptyCell()) {\n    if (noCellToMerge()) {\n      showMessage('lose');\n    }\n  }\n}\n\nfunction updateScore() {\n  score.textContent = scoreValue;\n\n  for (const row of table) {\n    for (const item of row) {\n      if (item === 2048) {\n        showMessage('win');\n      }\n    }\n  }\n}\n\nlet scoreValue = 0;\nconst score = document.querySelector('.game-score');\n\nscore.textContent = scoreValue;\n\nconst fields = document.querySelectorAll('.field-cell');\nconst button = document.querySelector('.button');\n\nfunction updateGameFields() {\n  for (let i = 0; i < fields.length; i++) {\n    const indexRow = Math.floor(i / 4);\n    const indexCol = i - (indexRow * 4);\n    const tableValue = table[indexRow][indexCol];\n\n    if (tableValue === 0) {\n      fields[i].textContent = '';\n    } else {\n      fields[i].textContent = tableValue;\n    }\n\n    fields[i].classList = ['field-cell'];\n\n    if (tableValue !== 0) {\n      fields[i].classList.add(`field-cell--${tableValue}`);\n    }\n  }\n}\n\nfunction appearingOneRandomCell() {\n  const [rowIndex, columnIndex] = getRandonCell();\n\n  const firstRandomNum = Math.floor(Math.random() * 10);\n\n  if (firstRandomNum === 4) {\n    table[rowIndex][columnIndex] = 4;\n  } else {\n    table[rowIndex][columnIndex] = 2;\n  }\n}\n\nfunction restart() {\n  table[0] = [0, 0, 0, 0];\n  table[1] = [0, 0, 0, 0];\n  table[2] = [0, 0, 0, 0];\n  table[3] = [0, 0, 0, 0];\n\n  scoreValue = 0;\n  updateScore();\n  showMessage('start');\n}\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    gameStart();\n  } else {\n    restart();\n    updateGameFields();\n    appearingOneRandomCell();\n    updateGameFields();\n    appearingOneRandomCell();\n    updateGameFields();\n  }\n});\n\nfunction getRandonCell() {\n  const emptyCells = [];\n\n  table.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * (emptyCells.length - 1))];\n}\n\nfunction left(paramArr) {\n  const arr = paramArr.filter(item => item !== 0);\n\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    const next = arr[i + 1];\n\n    if (current === next) {\n      arr[i] = current * 2;\n      scoreValue += arr[i];\n      updateScore();\n      arr[i + 1] = 0;\n    }\n  }\n\n  const mergedArr = arr.filter(item => item !== 0);\n\n  for (let i = 0; i < table.length; i++) {\n    paramArr[i] = mergedArr[i] || 0;\n  }\n}\n\nfunction right(paramArr) {\n  const arr = paramArr.filter(item => item !== 0);\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    const current = arr[i];\n    const prev = arr[i - 1];\n\n    if (current === prev) {\n      arr[i] = current * 2;\n      scoreValue += arr[i];\n      updateScore();\n      arr[i - 1] = 0;\n    }\n  }\n\n  const mergedArr = arr.filter(item => item !== 0);\n\n  while (mergedArr.length < 4) {\n    mergedArr.unshift(0);\n  }\n\n  for (let i = 0; i < table.length; i++) {\n    paramArr[i] = mergedArr[i] || 0;\n  }\n}\n\nfunction moveHorizontally(directionFunctionName) {\n  const json = JSON.stringify(table);\n  const copyTable = JSON.parse(json);\n\n  for (const row of table) {\n    directionFunctionName(row);\n  }\n\n  for (let i = 0; i < 16; i++) {\n    const rowIndex = Math.floor(i / 4);\n    const colIndex = i - (rowIndex * 4);\n\n    const tableValue = table[rowIndex][colIndex];\n    const copyTableValue = copyTable[rowIndex][colIndex];\n\n    if (tableValue !== copyTableValue) {\n      appearingOneRandomCell();\n      updateGameFields();\n\n      break;\n    }\n  }\n}\n\nfunction moveVertically(directionFunctionName) {\n  const json = JSON.stringify(table);\n  const copyTable = JSON.parse(json);\n\n  for (let j = 0; j < 4; j++) {\n    directionFunctionName(\n      [table[0][j], table[1][j], table[2][j], table[3][j]], j\n    );\n  }\n\n  for (let i = 0; i < 16; i++) {\n    const rowIndex = Math.floor(i / 4);\n    const colIndex = i - (rowIndex * 4);\n\n    const tableValue = table[rowIndex][colIndex];\n    const copyTableValue = copyTable[rowIndex][colIndex];\n\n    if (tableValue !== copyTableValue) {\n      appearingOneRandomCell();\n      updateGameFields();\n\n      break;\n    }\n  }\n}\n\ndocument.addEventListener('keydown', e => {\n  if (e.key === 'ArrowLeft') {\n    moveHorizontally(left);\n  }\n\n  if (e.key === 'ArrowRight') {\n    moveHorizontally(right);\n  }\n\n  if (e.key === 'ArrowUp') {\n    moveVertically(up);\n  }\n\n  if (e.key === 'ArrowDown') {\n    moveVertically(down);\n  }\n\n  loseCheck();\n});\n\nconst gameTable = document.querySelector('.game-field');\n\nlet touchStartX = 0;\nlet touchStartY = 0;\n\ndocument.addEventListener('touchmove', (e) => {\n  e.preventDefault();\n});\n\ngameTable.addEventListener('touchmove', (e) => {\n  e.preventDefault();\n});\n\ngameTable.addEventListener('touchstart', (e) => {\n  touchStartX = e.touches[0].clientX;\n  touchStartY = e.touches[0].clientY;\n});\n\ngameTable.addEventListener('touchend', (e) => {\n  const touchEndX = e.changedTouches[0].clientX;\n  const touchEndY = e.changedTouches[0].clientY;\n  const touchDiffX = touchEndX - touchStartX;\n  const touchDiffY = touchEndY - touchStartY;\n  const breakPoint = 50;\n\n  if (Math.abs(touchDiffX) > Math.abs(touchDiffY)) {\n    if (touchDiffX > breakPoint) {\n      moveHorizontally(right);\n      loseCheck();\n    } else if (touchDiffX < -1 * breakPoint) {\n      moveHorizontally(left);\n      loseCheck();\n    }\n  } else {\n    if (touchDiffY > breakPoint) {\n      moveVertically(down);\n      loseCheck();\n    } else if (touchDiffY < -1 * breakPoint) {\n      moveVertically(up);\n      loseCheck();\n    }\n  }\n});\n\ndocument.addEventListener('touchmove', (e) => {\n  e.preventDefault();\n});\n\nfunction gameStart() {\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'restart';\n\n  appearingOneRandomCell();\n  updateGameFields();\n  appearingOneRandomCell();\n  updateGameFields();\n}\n"]}